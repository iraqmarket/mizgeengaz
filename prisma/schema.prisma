generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  name            String?
  password        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  address         String?
  addressType     AddressType?
  apartmentNumber String?
  buildingNumber  String?
  complexName     String?
  floorNumber     String?
  mapPinLat       Float?
  mapPinLng       Float?
  phoneNumber     String?
  role            UserRole     @default(CUSTOMER)
  businessName    String?
  city            String?
  neighborhood    String?
  driver          Driver?
  orders          Order[]

  @@map("users")
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  tankSize        String
  quantity        Int
  totalPrice      Float
  deliveryAddress String
  phoneNumber     String
  status          OrderStatus   @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deliveredAt     DateTime?
  driverId        String?
  scheduledAt     DateTime?
  zoneId          String?
  driver          Driver?       @relation(fields: [driverId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  zone            DeliveryZone? @relation("OrderDeliveryZone", fields: [zoneId], references: [id])

  @@map("orders")
}

model Driver {
  id            String        @id @default(cuid())
  userId        String        @unique
  licenseNumber String        @unique
  vehicleType   String
  vehiclePlate  String        @unique
  status        DriverStatus  @default(AVAILABLE)
  currentLat    Float?
  currentLng    Float?
  profileImage  String?
  assignedZoneId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
  assignedZone  DeliveryZone? @relation("DriverAssignedZone", fields: [assignedZoneId], references: [id])

  @@map("drivers")
}

model Price {
  id          String   @id @default(cuid())
  basePrice   Float
  deliveryFee Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String   @unique

  @@map("prices")
}

model AppSettings {
  id               String   @id @default(cuid())
  googleMapsApiKey String?
  mapDefaultLat    Float?
  mapDefaultLng    Float?
  deliveryRadius   Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("app_settings")
}

model DeliveryZone {
  id            String   @id @default(cuid())
  name          String   @unique
  color         String
  coordinates   Json
  isActive      Boolean  @default(true)
  deliveryFee   Float?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]  @relation("OrderDeliveryZone")
  assignedDrivers Driver[] @relation("DriverAssignedZone")

  @@map("delivery_zones")
}

enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
}

enum AddressType {
  HOME
  BUSINESS
  APARTMENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  ASSIGNED
}

enum DriverStatus {
  AVAILABLE
  BUSY
  OFFLINE
  SUSPENDED
}
